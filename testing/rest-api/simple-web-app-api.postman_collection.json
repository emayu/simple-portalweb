{
	"info": {
		"_postman_id": "8c45cfd9-5664-449f-b501-f28d1dbb6668",
		"name": "Simple web app API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31643916"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "List Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Result is an Array with data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
									"    pm.expect(jsonData.length).be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Result has correct data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
									"    pm.expect(jsonData.length).be.greaterThan(0);\r",
									"    var value = jsonData[0];\r",
									"    pm.expect(value).has.haveOwnProperty(\"id\");\r",
									"    pm.expect(value).has.haveOwnProperty(\"name\");\r",
									"    pm.expect(value).has.not.ownProperty('password')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}user/",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "User By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Result has correct data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).has.haveOwnProperty(\"id\");\r",
									"    pm.expect(jsonData).has.haveOwnProperty(\"name\");\r",
									"    pm.expect(jsonData).has.haveOwnProperty(\"password\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}user/:id",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}user",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code returned Created correct\", function () {\r",
									"     pm.response.to.have.status(201);\r",
									" });\r",
									"\r",
									"postman.setNextRequest(\"Del User\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":7,\r\n    \"name\":\"test\",\r\n    \"password\":\"secret\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}user/",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Del User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code is not content\", function () {\r",
									"     pm.response.to.have.status(204);\r",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}user/7",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}user",
								"7"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "role",
			"item": [
				{
					"name": "List Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    pm.response.to.have.status(200);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Result is an Array with data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
									"    pm.expect(jsonData.length).be.greaterThan(0);\r",
									"});\r",
									"\r",
									"roles = [\"USER_ADMIN\", \"USER_ROLE\", \"FOO\"];\r",
									"roles.forEach( role => {\r",
									"    pm.test(\"Contains role \" + role, function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    foundValue = jsonData.find( val => val.name === role );\r",
									"    pm.expect(foundValue.name).to.be.equals(role);\r",
									"});\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}role/",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}role",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Role by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Result has correct data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).has.haveOwnProperty(\"id\");\r",
									"    pm.expect(jsonData).has.haveOwnProperty(\"name\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}role/:id",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}role",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code returned created correct\", function () {\r",
									"     pm.response.to.have.status(201);\r",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}role",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}role"
							]
						}
					},
					"response": []
				},
				{
					"name": "Del Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code returned not content correct\", function () {\r",
									"     pm.response.to.have.status(204);\r",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}role/:id",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}role",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "4"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user_x_role",
			"item": [
				{
					"name": "UserRoleDetail by User Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Result is an Array with data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
									"    pm.expect(jsonData.length).be.greaterThan(0);\r",
									"});\r",
									"\r",
									"let propertiesToHave = [\"id\", \"name\"];\r",
									"\r",
									"pm.test(\"Result has correct data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
									"    pm.expect(jsonData.length).be.greaterThan(0);\r",
									"    var value = jsonData[0];\r",
									"    propertiesToHave.forEach( property => \r",
									"        pm.expect(value).has.haveOwnProperty(property)\r",
									"    );\r",
									"    pm.expect(value.name).to.be.equals(\"USER_ADMIN\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}userrole/byUserName/:userName",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}userrole",
								"byUserName",
								":userName"
							],
							"variable": [
								{
									"key": "userName",
									"value": "developer"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List UserRole allDescription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Result is an Array with data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
									"    pm.expect(jsonData.length).be.greaterThan(0);\r",
									"});\r",
									"\r",
									"let propertiesToHave = [\"idRole\", \"idUser\", \"roleName\",\"userName\"];\r",
									"\r",
									"pm.test(\"Result has correct data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
									"    pm.expect(jsonData.length).be.greaterThan(0);\r",
									"    var value = jsonData[0];\r",
									"    propertiesToHave.forEach( property => \r",
									"        pm.expect(value).has.haveOwnProperty(property)\r",
									"    );\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}userrole/allDescription",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}userrole",
								"allDescription"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserRole 3 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Result has correct data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData).has.ownProperty(\"userRolePK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}userrole/id;userId=3;roleId=3",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}userrole",
								"id;userId=3;roleId=3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Del UserRole 3 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}userrole/foo;userId=3;roleId=3",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}userrole",
								"foo;userId=3;roleId=3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assing Role to User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 CREATED\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"userRolePK\": {\r\n            \"roleId\": 3,\r\n            \"userId\": 3\r\n        }\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}userrole/",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}userrole",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "auth test",
			"item": [
				{
					"name": "User By Id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Result has correct data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).has.haveOwnProperty(\"id\");\r",
									"    pm.expect(jsonData).has.haveOwnProperty(\"name\");\r",
									"    pm.expect(jsonData).has.haveOwnProperty(\"password\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}user/:id",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}user",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "This is the same at user collection"
					},
					"response": []
				},
				{
					"name": "Invalid credentials test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "foof",
									"type": "string"
								},
								{
									"key": "username",
									"value": "foo",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}user/:id",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}user",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "This is the same at user collection"
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "username",
				"value": "developer",
				"type": "string"
			},
			{
				"key": "password",
				"value": "secret",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "localhost"
		},
		{
			"key": "port",
			"value": "8080"
		},
		{
			"key": "app_base",
			"value": "portalweb-service/rest/v1/"
		}
	]
}